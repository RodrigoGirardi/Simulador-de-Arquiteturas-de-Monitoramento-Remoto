import socket
import threading
import time
import queue



#fifo = buffer
fifo = queue.Queue(2000)
MAX_SIZE_BUFFER = 2000
data = []

################### CABEÇALHO DO SERVIDOR

################### SERVIDOR
def servidor():
    HOST = '10.32.160.87'
    PORT = 3535
    recebe = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    recebe.bind(('10.32.160.87', 3535))
    recebe.listen(1)
    print('Aguardando conexão de um cliente...')
    print(HOST)
    print(PORT)
    sc, endereco = recebe.accept()  # Aceita a conexão e obtém o objeto de soquete e o endereço do cliente
    print("Aceitei o cliente")
    while True:
        ler_fifo = sc.recv(1024)
        fifo.put(ler_fifo)#else add no buffer
        print("Servidor foi chamado e escreveu na FIFO")
        print(f"Dados do buffer: {fifo}")

################### TIMER
def timer():#chama o decodificador a cada 0.1 ou 0.05 segundos
    while True:
        if fifo.qsize() >= MAX_SIZE_BUFFER:#CHEIO
            time.sleep(0.05)#Acelerando leitura de buffer
            decoder()
        else:
            time.sleep(0.1)
            decoder()
        #time.sleep(t)  # Espera "t" milissegundos

################### DECODER
def decoder():
    while True:
        if not fifo:#se fifo estiver vazia
            print("Fifo vazia...")
        else:
            #fifo.get(p)
            data.append(fifo.get())# pega o elemento mais antigo da fila e salva no vetor data
            cmd = int(data[0],16)
            print(f"Valor cmd: {cmd}")
            size = int(data[1],16)
            print(f"Valor size: {size}")

            j = size
            for j in data: #Popula os dados no vetor de DADOS
                dadinho = int(j, 16)
                data.append(dadinho)

            crc1 = data[len(data)-1]
            data = data[2:]
            data.pop(-1)

            print(f"Comando = {cmd}, Size: {size}, Dados: {data}, CRC: {crc1}")   
            ################# TERMINO DA LEITURA
            crcV = 0

            print(f"Resultado de crcV: {crcV}")
            print(f"Resultado de cmd: {cmd}")
            print(f"Resultado de size: {size}")

            crcV = crcV ^ cmd
            print(f"Resultado: {crcV} ^ {cmd} -> {crcV}")
            crcV = crcV ^ size
            print(f"Resultado: {crcV} ^ {size} -> {crcV}")

            print(f"/////////////////////////////////////////////////////////")
            i = 0
            count = 0
            for i in data:
                print(f"Valor de I : {i}")
                crcV = crcV ^ i
                print(f"Posição: {count}. Resultado: {crcV} ^ {i} -> {crcV}")
                count += 1
            print(f"/////////////////////////////////////////////////////////")
            print(f"Resultado de crcV: {crcV}")
            print(f"Resultado de crc1: {crc1}")
            if(crcV == crc1):
                print(f"Dados consistentes.")
            else:
                print(f"Erro de verificação.")
            
            crcV = 0
            data.clear()#limpa o vetor de dados para a proxima iteração de linha 


################### Crie as thread para as funções
thread1 = threading.Thread(target=servidor)
thread2 = threading.Thread(target=timer)
thread3 = threading.Thread(target=decoder)
################### Inicia as threads
thread1.start()# Inicie o paralelismo para o servidor
time.sleep(0.1) 
thread3.start()# Inicie o paralelismo para a funcao timer
time.sleep(0.1)
thread2.start()# Inicie o paralelismo para o decodificador
time.sleep(0.1)